// todo Add swarm tests for top scenarios, including the scalar at root level scenario.
// todo Create a new language, similar to this, except using pattern matching instead of prefix notation.

// Cell Parsers
anyCell
keywordCell
 highlightScope keyword
stringCell
 highlightScope string
booleanCell
 enum true false
 highlightScope constant.numeric
numberCell
 highlightScope constant.numeric

// Line Parsers
dugParser
 root
 description A demonstration prefix Tree Language that compiles to JSON.
 inScope abstractValueParser
 catchAllParser errorParser
 javascript
  compile() {
   const res = super.compile()
   return JSON.stringify(JSON.parse(res), null, 2)
  }
abstractValueParser
 cells keywordCell
 cruxFromId
nullParser
 compiler
  stringTemplate null
 extends abstractValueParser
numberParser
 extends abstractValueParser
 cells keywordCell numberCell
 compiler
  stringTemplate {numberCell}
stringParser
 catchAllCellType stringCell
 compiler
  stringTemplate "{stringCell}"
 extends abstractValueParser
booleanParser
 extends abstractValueParser
 cells keywordCell booleanCell
 compiler
  stringTemplate {booleanCell}
objectParser
 catchAllParser memberParser
 extends abstractValueParser
 compiler
  stringTemplate  
  joinChildrenWith , 
  openChildren {
  closeChildren }
arrayParser
 extends abstractValueParser
 inScope abstractValueParser
 compiler
  stringTemplate  
  joinChildrenWith , 
  openChildren [
  closeChildren ]
memberParser
 inScope abstractValueParser
 compiler
  stringTemplate "{stringCell}" :
 cells stringCell
errorParser
 baseParser errorParser